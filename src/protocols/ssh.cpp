/*
 * Copyright (c) 2014, Quarkslab
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * 
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * 
 * * Neither the name of the {organization} nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <ns/protocols/ssh.h>
#include <ns/lvl4_state_machine.h>
#include <ns/connected_target.h>
#include <ns/action.h>

namespace nsp = ns::protocols;

unsigned char client_key_exchange[1456] = {
	0x00, 0x00, 0x05, 0xAC, 0x04, 0x14, 0x45, 0x17, 0x1E, 0xD1, 0x8D, 0x29, 0x3F, 0xC8, 0xCF, 0xD0, 
	0xE6, 0x00, 0x22, 0xE8, 0xE5, 0x2C, 0x00, 0x00, 0x00, 0x38, 0x65, 0x63, 0x64, 0x68, 0x2D, 0x73, 
	0x68, 0x61, 0x32, 0x2D, 0x6E, 0x69, 0x73, 0x74, 0x70, 0x32, 0x35, 0x36, 0x2C, 0x65, 0x63, 0x64, 
	0x68, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x6E, 0x69, 0x73, 0x74, 0x70, 0x33, 0x38, 0x34, 0x2C, 
	0x65, 0x63, 0x64, 0x68, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x6E, 0x69, 0x73, 0x74, 0x70, 0x35, 
	0x32, 0x31, 0x00, 0x00, 0x00, 0x07, 0x73, 0x73, 0x68, 0x2D, 0x72, 0x73, 0x61, 0x00, 0x00, 0x00, 
	0xE9, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2D, 0x63, 0x74, 0x72, 0x2C, 0x61, 0x65, 0x73, 0x31, 
	0x39, 0x32, 0x2D, 0x63, 0x74, 0x72, 0x2C, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x2D, 0x63, 0x74, 
	0x72, 0x2C, 0x61, 0x72, 0x63, 0x66, 0x6F, 0x75, 0x72, 0x32, 0x35, 0x36, 0x2C, 0x61, 0x72, 0x63, 
	0x66, 0x6F, 0x75, 0x72, 0x31, 0x32, 0x38, 0x2C, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2D, 0x67, 
	0x63, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x61, 
	0x65, 0x73, 0x32, 0x35, 0x36, 0x2D, 0x67, 0x63, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 
	0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x63, 0x68, 0x61, 0x63, 0x68, 0x61, 0x32, 0x30, 0x2D, 0x70, 
	0x6F, 0x6C, 0x79, 0x31, 0x33, 0x30, 0x35, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 
	0x63, 0x6F, 0x6D, 0x2C, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2D, 0x63, 0x62, 0x63, 0x2C, 0x33, 
	0x64, 0x65, 0x73, 0x2D, 0x63, 0x62, 0x63, 0x2C, 0x62, 0x6C, 0x6F, 0x77, 0x66, 0x69, 0x73, 0x68, 
	0x2D, 0x63, 0x62, 0x63, 0x2C, 0x63, 0x61, 0x73, 0x74, 0x31, 0x32, 0x38, 0x2D, 0x63, 0x62, 0x63, 
	0x2C, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2D, 0x63, 0x62, 0x63, 0x2C, 0x61, 0x65, 0x73, 0x32, 
	0x35, 0x36, 0x2D, 0x63, 0x62, 0x63, 0x2C, 0x61, 0x72, 0x63, 0x66, 0x6F, 0x75, 0x72, 0x2C, 0x72, 
	0x69, 0x6A, 0x6E, 0x64, 0x61, 0x65, 0x6C, 0x2D, 0x63, 0x62, 0x63, 0x40, 0x6C, 0x79, 0x73, 0x61, 
	0x74, 0x6F, 0x72, 0x2E, 0x6C, 0x69, 0x75, 0x2E, 0x73, 0x65, 0x00, 0x00, 0x00, 0xE9, 0x61, 0x65, 
	0x73, 0x31, 0x32, 0x38, 0x2D, 0x63, 0x74, 0x72, 0x2C, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2D, 
	0x63, 0x74, 0x72, 0x2C, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x2D, 0x63, 0x74, 0x72, 0x2C, 0x61, 
	0x72, 0x63, 0x66, 0x6F, 0x75, 0x72, 0x32, 0x35, 0x36, 0x2C, 0x61, 0x72, 0x63, 0x66, 0x6F, 0x75, 
	0x72, 0x31, 0x32, 0x38, 0x2C, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2D, 0x67, 0x63, 0x6D, 0x40, 
	0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x61, 0x65, 0x73, 0x32, 
	0x35, 0x36, 0x2D, 0x67, 0x63, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 
	0x6F, 0x6D, 0x2C, 0x63, 0x68, 0x61, 0x63, 0x68, 0x61, 0x32, 0x30, 0x2D, 0x70, 0x6F, 0x6C, 0x79, 
	0x31, 0x33, 0x30, 0x35, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 
	0x2C, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2D, 0x63, 0x62, 0x63, 0x2C, 0x33, 0x64, 0x65, 0x73, 
	0x2D, 0x63, 0x62, 0x63, 0x2C, 0x62, 0x6C, 0x6F, 0x77, 0x66, 0x69, 0x73, 0x68, 0x2D, 0x63, 0x62, 
	0x63, 0x2C, 0x63, 0x61, 0x73, 0x74, 0x31, 0x32, 0x38, 0x2D, 0x63, 0x62, 0x63, 0x2C, 0x61, 0x65, 
	0x73, 0x31, 0x39, 0x32, 0x2D, 0x63, 0x62, 0x63, 0x2C, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x2D, 
	0x63, 0x62, 0x63, 0x2C, 0x61, 0x72, 0x63, 0x66, 0x6F, 0x75, 0x72, 0x2C, 0x72, 0x69, 0x6A, 0x6E, 
	0x64, 0x61, 0x65, 0x6C, 0x2D, 0x63, 0x62, 0x63, 0x40, 0x6C, 0x79, 0x73, 0x61, 0x74, 0x6F, 0x72, 
	0x2E, 0x6C, 0x69, 0x75, 0x2E, 0x73, 0x65, 0x00, 0x00, 0x01, 0x92, 0x68, 0x6D, 0x61, 0x63, 0x2D, 
	0x6D, 0x64, 0x35, 0x2D, 0x65, 0x74, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 
	0x63, 0x6F, 0x6D, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x31, 0x2D, 0x65, 0x74, 
	0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x75, 0x6D, 
	0x61, 0x63, 0x2D, 0x36, 0x34, 0x2D, 0x65, 0x74, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 
	0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x75, 0x6D, 0x61, 0x63, 0x2D, 0x31, 0x32, 0x38, 0x2D, 0x65, 
	0x74, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x68, 
	0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x32, 0x35, 0x36, 0x2D, 0x65, 0x74, 0x6D, 
	0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x68, 0x6D, 0x61, 
	0x63, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x35, 0x31, 0x32, 0x2D, 0x65, 0x74, 0x6D, 0x40, 0x6F, 
	0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 
	0x72, 0x69, 0x70, 0x65, 0x6D, 0x64, 0x31, 0x36, 0x30, 0x2D, 0x65, 0x74, 0x6D, 0x40, 0x6F, 0x70, 
	0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 
	0x68, 0x61, 0x31, 0x2D, 0x39, 0x36, 0x2D, 0x65, 0x74, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 
	0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x6D, 0x64, 0x35, 0x2D, 
	0x39, 0x36, 0x2D, 0x65, 0x74, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 
	0x6F, 0x6D, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x6D, 0x64, 0x35, 0x2C, 0x68, 0x6D, 0x61, 0x63, 
	0x2D, 0x73, 0x68, 0x61, 0x31, 0x2C, 0x75, 0x6D, 0x61, 0x63, 0x2D, 0x36, 0x34, 0x40, 0x6F, 0x70, 
	0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x75, 0x6D, 0x61, 0x63, 0x2D, 0x31, 
	0x32, 0x38, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x68, 
	0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x32, 0x35, 0x36, 0x2C, 0x68, 0x6D, 0x61, 
	0x63, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x35, 0x31, 0x32, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 
	0x72, 0x69, 0x70, 0x65, 0x6D, 0x64, 0x31, 0x36, 0x30, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x72, 
	0x69, 0x70, 0x65, 0x6D, 0x64, 0x31, 0x36, 0x30, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 
	0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x31, 0x2D, 0x39, 
	0x36, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x6D, 0x64, 0x35, 0x2D, 0x39, 0x36, 0x00, 0x00, 0x01, 
	0x92, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x6D, 0x64, 0x35, 0x2D, 0x65, 0x74, 0x6D, 0x40, 0x6F, 0x70, 
	0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 
	0x68, 0x61, 0x31, 0x2D, 0x65, 0x74, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 
	0x63, 0x6F, 0x6D, 0x2C, 0x75, 0x6D, 0x61, 0x63, 0x2D, 0x36, 0x34, 0x2D, 0x65, 0x74, 0x6D, 0x40, 
	0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x75, 0x6D, 0x61, 0x63, 
	0x2D, 0x31, 0x32, 0x38, 0x2D, 0x65, 0x74, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 
	0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x32, 
	0x35, 0x36, 0x2D, 0x65, 0x74, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 
	0x6F, 0x6D, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x35, 0x31, 0x32, 
	0x2D, 0x65, 0x74, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 
	0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x72, 0x69, 0x70, 0x65, 0x6D, 0x64, 0x31, 0x36, 0x30, 0x2D, 
	0x65, 0x74, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 
	0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x31, 0x2D, 0x39, 0x36, 0x2D, 0x65, 0x74, 0x6D, 
	0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x68, 0x6D, 0x61, 
	0x63, 0x2D, 0x6D, 0x64, 0x35, 0x2D, 0x39, 0x36, 0x2D, 0x65, 0x74, 0x6D, 0x40, 0x6F, 0x70, 0x65, 
	0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x6D, 0x64, 
	0x35, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x31, 0x2C, 0x75, 0x6D, 0x61, 0x63, 
	0x2D, 0x36, 0x34, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 
	0x75, 0x6D, 0x61, 0x63, 0x2D, 0x31, 0x32, 0x38, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 
	0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x32, 
	0x35, 0x36, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x35, 0x31, 0x32, 
	0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x72, 0x69, 0x70, 0x65, 0x6D, 0x64, 0x31, 0x36, 0x30, 0x2C, 
	0x68, 0x6D, 0x61, 0x63, 0x2D, 0x72, 0x69, 0x70, 0x65, 0x6D, 0x64, 0x31, 0x36, 0x30, 0x40, 0x6F, 
	0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 
	0x73, 0x68, 0x61, 0x31, 0x2D, 0x39, 0x36, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x6D, 0x64, 0x35, 
	0x2D, 0x39, 0x36, 0x00, 0x00, 0x00, 0x1A, 0x7A, 0x6C, 0x69, 0x62, 0x40, 0x6F, 0x70, 0x65, 0x6E, 
	0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x7A, 0x6C, 0x69, 0x62, 0x2C, 0x6E, 0x6F, 0x6E, 
	0x65, 0x00, 0x00, 0x00, 0x1A, 0x7A, 0x6C, 0x69, 0x62, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 
	0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x7A, 0x6C, 0x69, 0x62, 0x2C, 0x6E, 0x6F, 0x6E, 0x65, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/*static unsigned char client_dh[48] = {
	0x00, 0x00, 0x00, 0x2C, 0x06, 0x1E, 0x00, 0x00, 0x00, 0x20, 0xDD, 0xDB, 0x1F, 0x6D, 0x4E, 0xC1, 
	0xAF, 0xBF, 0x01, 0x84, 0x9E, 0xA1, 0x4E, 0xF3, 0x81, 0x15, 0x99, 0x4E, 0x3B, 0x15, 0x18, 0x34, 
	0xD7, 0x15, 0xCA, 0x0D, 0x30, 0x8A, 0x0F, 0x49, 0x5F, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};*/

/*static unsigned char client_dh[80] = {
	0x00, 0x00, 0x00, 0x4C, 0x05, 0x1E, 0x00, 0x00, 0x00, 0x41, 0x04, 0x3D, 0xE6, 0x95, 0x83, 0x2C, 
	0x1D, 0x83, 0x42, 0x6D, 0x4B, 0xCB, 0x09, 0x8C, 0xEE, 0xF6, 0x87, 0xF3, 0x4F, 0xAD, 0x89, 0xC3, 
	0x94, 0x89, 0x47, 0x6E, 0x60, 0x26, 0xC4, 0x19, 0xB9, 0x43, 0x40, 0x6B, 0xCC, 0x5B, 0x9C, 0x72, 
	0xBC, 0x01, 0x74, 0x0B, 0x37, 0x7E, 0x0B, 0xFA, 0x9F, 0xE6, 0x19, 0x88, 0x47, 0x57, 0x84, 0x34, 
	0x4B, 0x07, 0xE7, 0xA0, 0x42, 0x26, 0x08, 0x91, 0x47, 0x7F, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x00
};*/

static unsigned char client_dh[80] = {
	0x00, 0x00, 0x00, 0x4C, 0x05, 0x1E, 0x00, 0x00, 0x00, 0x41, 0x04, 0x4A, 0x57, 0x2B, 0x2F, 0xA8, 
	0x30, 0xD4, 0x02, 0x92, 0x5F, 0x3E, 0xE6, 0x9F, 0x1F, 0xE6, 0x69, 0x67, 0x20, 0x58, 0x38, 0x38, 
	0x76, 0xD9, 0xA8, 0x3E, 0x32, 0x6B, 0xAD, 0xED, 0xBC, 0xBF, 0x0D, 0x9C, 0xAE, 0xBC, 0xAE, 0xBB, 
	0xCE, 0xB6, 0x96, 0xD4, 0x03, 0xB1, 0x04, 0x00, 0xA7, 0x16, 0xA9, 0x5D, 0x75, 0x66, 0x44, 0x5B, 
	0x6B, 0x8F, 0x63, 0x67, 0x08, 0x06, 0x47, 0xB6, 0x9C, 0x69, 0x6A, 0x00, 0x00, 0x00, 0x00, 0x00
};

class SSHAnswer
{
public:
	SSHAnswer() { }
	SSHAnswer(SSHAnswer const& o):
		_next(o._next)
	{ }
public:
	SSHAnswer& next(ns::Lvl4DataAction const& n) { _next = n; return *this; }

public:
	bool operator()(ns::ConnectedTarget const& t, ns::Lvl4SM& lvl4sm, ns::HostSM&, unsigned char* buf, uint32_t size) const
	{
		if (!_next) {
			return false;
		}
		// TODO: check lengths from RFC
		uint32_t len = ntohl(*((uint32_t*)(buf)));
		uint8_t padding = buf[4];
		len += padding;
		if (len <= 7) {
			return false;
		}
		len -= 7;
		ns::Lvl4DataAction next = _next;
		lvl4sm.set_trigger<ns::SizeDataTrigger>(len, 
			[next](ns::ConnectedTarget const& t, ns::Lvl4SM& lvl4sm, ns::HostSM& hsm, unsigned char* buf, uint32_t size)
			{
				return next(t, lvl4sm, hsm, buf, size);
			});
		return true;
	}

private:
	ns::Lvl4DataAction _next;
};

class SSHGetCertificate
{
public:
	SSHGetCertificate& on_certificate(ns::Lvl4DataAction const& a) { _cb_certif = a; return *this; }
	SSHGetCertificate& on_invalid_answer(ns::Lvl4DataAction const& a) { _cb_invalid = a; return *this; }

public:
	bool operator()(ns::ConnectedTarget const& t, ns::Lvl4SM& lvl4sm, ns::HostSM& hsm, unsigned char* buf, uint32_t size) const
	{
		if (size < 1) {
			return call_cb<false>(_cb_invalid, t, lvl4sm, hsm, buf, size);
		}
		if (buf[0] != 0x1f) { // DF reply
			return call_cb<false>(_cb_invalid, t, lvl4sm, hsm, buf, size);
		}
		size--;
		buf++;
		if (size < 4) {
			return call_cb<false>(_cb_invalid, t, lvl4sm, hsm, buf, size);
		}
		size -= 4;
		uint32_t len = ntohl(*((uint32_t*)buf));
		buf += 4;
		if (size < len) {
			return call_cb<false>(_cb_invalid, t, lvl4sm, hsm, buf, size);
		}

		if (_cb_certif) {
			return _cb_certif(t, lvl4sm, hsm, buf, size);
		}

		return false;
	}

private:
	template <bool def, class... Args>
	static bool call_cb(ns::Lvl4DataAction const& action, Args && ... args)
	{
		if (action) {
			return action(std::forward<Args>(args)...);
		}
		return def;
	}

private:
	ns::Lvl4DataAction _cb_certif;
	ns::Lvl4DataAction _cb_invalid;
};

bool nsp::SSH::operator()(ns::ConnectedTarget const& t, ns::Lvl4SM& lvl4sm, ns::HostSM&) const
{
	t.send("SSH-2.0-OpenSSH_6.6.1p1 my-little-poney\r\n");
	Lvl4DataAction cb_certif = _cb_certif;
	Lvl4DataAction cb_invalid = _cb_invalid;
	lvl4sm.set_trigger<ns::CharDataTrigger>('\n',
		[cb_certif,cb_invalid](ns::ConnectedTarget const& t, ns::Lvl4SM& lvl4sm, ns::HostSM& hsm, unsigned char* buf, uint32_t size)
		{
			if (size < 7) {
				return call_cb<false>(cb_invalid, t, lvl4sm, hsm, buf, size);
			}
			if (memcmp(buf, "SSH-2.0", 7) != 0) {
				return call_cb<false>(cb_invalid, t, lvl4sm, hsm, buf, size);
			}
			t.send(client_key_exchange, sizeof(client_key_exchange));
			t.send(client_dh, sizeof(client_dh));
			lvl4sm.set_trigger<ns::SizeDataTrigger>
			(5, SSHAnswer().next(
				[cb_certif,cb_invalid](ns::ConnectedTarget const& t, ns::Lvl4SM& lvl4sm, ns::HostSM&, unsigned char* buf, uint32_t size)
				{
					lvl4sm.set_trigger<ns::SizeDataTrigger>(5,
						SSHAnswer().next
						(
							SSHGetCertificate().on_certificate(cb_certif)
							                   .on_invalid_answer(cb_invalid)
						)
					);
					return true;
				}
				)
			);
			return true;
		}
	);
	return true;
}
